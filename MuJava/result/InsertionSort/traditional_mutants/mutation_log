AORB_1:18:int_sort(int):i - 1 => i * 1
AORB_2:18:int_sort(int):i - 1 => i / 1
AORB_3:18:int_sort(int):i - 1 => i % 1
AORB_4:18:int_sort(int):i - 1 => i + 1
AORB_5:20:int_sort(int):j + 1 => j * 1
AORB_6:20:int_sort(int):j + 1 => j / 1
AORB_7:20:int_sort(int):j + 1 => j % 1
AORB_8:20:int_sort(int):j + 1 => j - 1
AORB_9:23:int_sort(int):j + 1 => j * 1
AORB_10:23:int_sort(int):j + 1 => j / 1
AORB_11:23:int_sort(int):j + 1 => j % 1
AORB_12:23:int_sort(int):j + 1 => j - 1
AORB_13:26:int_sort(int):j + 1 => j * 1
AORB_14:26:int_sort(int):j + 1 => j / 1
AORB_15:26:int_sort(int):j + 1 => j % 1
AORB_16:26:int_sort(int):j + 1 => j - 1
AORS_1:17:int_sort(int):i++ => i--
AORS_2:18:int_sort(int):j-- => j++
AOIU_1:12:int_sort(int):arr.length => -arr.length
AOIU_2:13:int_sort(int):n => -n
AOIU_3:17:int_sort(int):i => -i
AOIU_4:17:int_sort(int):arr.length => -arr.length
AOIU_5:18:int_sort(int):i => -i
AOIU_6:18:int_sort(int):j => -j
AOIU_7:19:int_sort(int):i => -i
AOIU_8:19:int_sort(int):j => -j
AOIU_9:20:int_sort(int):i => -i
AOIU_10:23:int_sort(int):j => -j
AOIU_11:26:int_sort(int):i => -i
AOIS_1:12:int_sort(int):arr.length => arr.length++
AOIS_2:12:int_sort(int):arr.length => arr.length--
AOIS_3:13:int_sort(int):n => n++
AOIS_4:13:int_sort(int):n => n--
AOIS_5:17:int_sort(int):i => ++i
AOIS_6:17:int_sort(int):i => --i
AOIS_7:17:int_sort(int):i => i++
AOIS_8:17:int_sort(int):i => i--
AOIS_9:17:int_sort(int):arr.length => ++arr.length
AOIS_10:17:int_sort(int):arr.length => --arr.length
AOIS_11:17:int_sort(int):arr.length => arr.length++
AOIS_12:17:int_sort(int):arr.length => arr.length--
AOIS_13:18:int_sort(int):i => ++i
AOIS_14:18:int_sort(int):i => --i
AOIS_15:18:int_sort(int):i => i++
AOIS_16:18:int_sort(int):i => i--
AOIS_17:18:int_sort(int):j => ++j
AOIS_18:18:int_sort(int):j => --j
AOIS_19:18:int_sort(int):j => j++
AOIS_20:18:int_sort(int):j => j--
AOIS_21:19:int_sort(int):i => ++i
AOIS_22:19:int_sort(int):i => --i
AOIS_23:19:int_sort(int):i => i++
AOIS_24:19:int_sort(int):i => i--
AOIS_25:19:int_sort(int):j => ++j
AOIS_26:19:int_sort(int):j => --j
AOIS_27:19:int_sort(int):j => j++
AOIS_28:19:int_sort(int):j => j--
AOIS_29:20:int_sort(int):i => ++i
AOIS_30:20:int_sort(int):i => --i
AOIS_31:20:int_sort(int):i => i++
AOIS_32:20:int_sort(int):i => i--
AOIS_33:23:int_sort(int):j => ++j
AOIS_34:23:int_sort(int):j => --j
AOIS_35:23:int_sort(int):j => j++
AOIS_36:23:int_sort(int):j => j--
AOIS_37:26:int_sort(int):i => ++i
AOIS_38:26:int_sort(int):i => --i
AOIS_39:26:int_sort(int):i => i++
AOIS_40:26:int_sort(int):i => i--
ROR_1:17:int_sort(int): i < arr.length  =>   i > arr.length
ROR_2:17:int_sort(int): i < arr.length  =>   i >= arr.length
ROR_3:17:int_sort(int): i < arr.length  =>   i <= arr.length
ROR_4:17:int_sort(int): i < arr.length  =>   i == arr.length
ROR_5:17:int_sort(int): i < arr.length  =>   i != arr.length
ROR_6:17:int_sort(int): i < arr.length  =>   true
ROR_7:17:int_sort(int): i < arr.length  =>   false
ROR_8:18:int_sort(int): j >= 0  =>   j > 0
ROR_9:18:int_sort(int): j >= 0  =>   j < 0
ROR_10:18:int_sort(int): j >= 0  =>   j <= 0
ROR_11:18:int_sort(int): j >= 0  =>   j == 0
ROR_12:18:int_sort(int): j >= 0  =>   j != 0
ROR_13:18:int_sort(int): j >= 0  =>   true
ROR_14:18:int_sort(int): j >= 0  =>   false
ROR_15:19:int_sort(int): arr[i] > newArr[j]  =>   arr[i] >= newArr[j]
ROR_16:19:int_sort(int): arr[i] > newArr[j]  =>   arr[i] < newArr[j]
ROR_17:19:int_sort(int): arr[i] > newArr[j]  =>   arr[i] <= newArr[j]
ROR_18:19:int_sort(int): arr[i] > newArr[j]  =>   arr[i] == newArr[j]
ROR_19:19:int_sort(int): arr[i] > newArr[j]  =>   arr[i] != newArr[j]
ROR_20:19:int_sort(int): arr[i] > newArr[j]  =>   true
ROR_21:19:int_sort(int): arr[i] > newArr[j]  =>   false
COI_1:17:int_sort(int): i < arr.length  =>  !(i < arr.length)
COI_2:18:int_sort(int): j >= 0  =>  !(j >= 0)
COI_3:19:int_sort(int): arr[i] > newArr[j]  =>  !(arr[i] > newArr[j])
LOI_1:12:int_sort(int):arr.length => ~arr.length
LOI_2:13:int_sort(int):n => ~n
LOI_3:17:int_sort(int):i => ~i
LOI_4:17:int_sort(int):arr.length => ~arr.length
LOI_5:17:int_sort(int):i => ~i
LOI_6:18:int_sort(int):i => ~i
LOI_7:18:int_sort(int):j => ~j
LOI_8:18:int_sort(int):j => ~j
LOI_9:19:int_sort(int):i => ~i
LOI_10:19:int_sort(int):j => ~j
LOI_11:20:int_sort(int):j => ~j
LOI_12:20:int_sort(int):i => ~i
LOI_13:23:int_sort(int):j => ~j
LOI_14:23:int_sort(int):j => ~j
LOI_15:26:int_sort(int):j => ~j
LOI_16:26:int_sort(int):i => ~i
SDL_1:28:int_sort(int): int n = arr.length; int[] newArr = new int[n]; newArr[0] = arr[0]; int i; int j; for (i = 1; i < arr.length; i++) {     for (j = i - 1; j >= 0; j--) {         if (arr[i] > newArr[j]) {             newArr[j + 1] = arr[i];             break;         } else {             newArr[j + 1] = newArr[j];         }     }     newArr[j + 1] = arr[i]; } return newArr;  =>   int n = arr.length; int[] newArr = new int[n]; int i; int j; for (i = 1; i < arr.length; i++) {     for (j = i - 1; j >= 0; j--) {         if (arr[i] > newArr[j]) {             newArr[j + 1] = arr[i];             break;         } else {             newArr[j + 1] = newArr[j];         }     }     newArr[j + 1] = arr[i]; } return newArr;
SDL_2:18:int_sort(int): int n = arr.length; int[] newArr = new int[n]; newArr[0] = arr[0]; int i; int j; for (i = 1; i < arr.length; i++) {     for (j = i - 1; j >= 0; j--) {         if (arr[i] > newArr[j]) {             newArr[j + 1] = arr[i];             break;         } else {             newArr[j + 1] = newArr[j];         }     }     newArr[j + 1] = arr[i]; } return newArr;  =>   int n = arr.length; int[] newArr = new int[n]; newArr[0] = arr[0]; int i; int j; return newArr;
SDL_3:19:int_sort(int): for (j = i - 1; j >= 0; j--) {     if (arr[i] > newArr[j]) {         newArr[j + 1] = arr[i];         break;     } else {         newArr[j + 1] = newArr[j];     } } newArr[j + 1] = arr[i];  =>   newArr[j + 1] = arr[i];
SDL_4:26:int_sort(int): for (j = i - 1; j >= 0; j--) {     if (arr[i] > newArr[j]) {         newArr[j + 1] = arr[i];         break;     } else {         newArr[j + 1] = newArr[j];     } } newArr[j + 1] = arr[i];  =>   for (j = i - 1; j >= 0; j--) {     if (arr[i] > newArr[j]) {         newArr[j + 1] = arr[i];         break;     } else {         newArr[j + 1] = newArr[j];     } }
SDL_5:28:int_sort(int): for (i = 1; i < arr.length; i++) {     for (j = i - 1; j >= 0; j--) {         if (arr[i] > newArr[j]) {             newArr[j + 1] = arr[i];             break;         } else {             newArr[j + 1] = newArr[j];         }     }     newArr[j + 1] = arr[i]; }  =>   for (;; i++) {     for (j = i - 1; j >= 0; j--) {         if (arr[i] > newArr[j]) {             newArr[j + 1] = arr[i];             break;         } else {             newArr[j + 1] = newArr[j];         }     }     newArr[j + 1] = arr[i]; }
SDL_6:28:int_sort(int): for (i = 1; i < arr.length; i++) {     for (j = i - 1; j >= 0; j--) {         if (arr[i] > newArr[j]) {             newArr[j + 1] = arr[i];             break;         } else {             newArr[j + 1] = newArr[j];         }     }     newArr[j + 1] = arr[i]; }  =>   for (; i < arr.length;) {     for (j = i - 1; j >= 0; j--) {         if (arr[i] > newArr[j]) {             newArr[j + 1] = arr[i];             break;         } else {             newArr[j + 1] = newArr[j];         }     }     newArr[j + 1] = arr[i]; }
SDL_7:19:int_sort(int): if (arr[i] > newArr[j]) {     newArr[j + 1] = arr[i];     break; } else {     newArr[j + 1] = newArr[j]; }  =>  
SDL_8:26:int_sort(int): for (j = i - 1; j >= 0; j--) {     if (arr[i] > newArr[j]) {         newArr[j + 1] = arr[i];         break;     } else {         newArr[j + 1] = newArr[j];     } }  =>   for (;; j--) {     if (arr[i] > newArr[j]) {         newArr[j + 1] = arr[i];         break;     } else {         newArr[j + 1] = newArr[j];     } }
SDL_9:26:int_sort(int): for (j = i - 1; j >= 0; j--) {     if (arr[i] > newArr[j]) {         newArr[j + 1] = arr[i];         break;     } else {         newArr[j + 1] = newArr[j];     } }  =>   for (; j >= 0;) {     if (arr[i] > newArr[j]) {         newArr[j + 1] = arr[i];         break;     } else {         newArr[j + 1] = newArr[j];     } }
SDL_10:21:int_sort(int): newArr[j + 1] = arr[i]; break;  =>   break;
SDL_11:21:int_sort(int): newArr[j + 1] = arr[i]; break;  =>   newArr[j + 1] = arr[i];
SDL_12:25:int_sort(int): if (arr[i] > newArr[j]) {     newArr[j + 1] = arr[i];     break; } else {     newArr[j + 1] = newArr[j]; }  =>   if (true) {     newArr[j + 1] = arr[i];     break; } else {     newArr[j + 1] = newArr[j]; }
SDL_13:23:int_sort(int): newArr[j + 1] = newArr[j];  =>  
SDL_14:29:int_sort(int): return newArr;  =>   return 0;
VDL_1:17:int_sort(int):i < arr.length => arr.length
VDL_2:17:int_sort(int):i++ =>  
VDL_3:18:int_sort(int):i - 1 => 1
VDL_4:18:int_sort(int):j >= 0 => 0
VDL_5:18:int_sort(int):j-- =>  
VDL_6:19:int_sort(int):arr[i] > newArr[j] => newArr[j]
VDL_7:19:int_sort(int):arr[i] > newArr[j] => arr[i]
VDL_8:20:int_sort(int):j + 1 => 1
VDL_9:23:int_sort(int):j + 1 => 1
VDL_10:26:int_sort(int):j + 1 => 1
ODL_1:17:int_sort(int):i < arr.length => i
ODL_2:17:int_sort(int):i < arr.length => arr.length
ODL_3:17:int_sort(int):i++ => i
ODL_4:18:int_sort(int):i - 1 => i
ODL_5:18:int_sort(int):i - 1 => 1
ODL_6:18:int_sort(int):j >= 0 => j
ODL_7:18:int_sort(int):j >= 0 => 0
ODL_8:18:int_sort(int):j-- => j
ODL_9:19:int_sort(int):arr[i] > newArr[j] => arr[i]
ODL_10:19:int_sort(int):arr[i] > newArr[j] => newArr[j]
ODL_11:20:int_sort(int):j + 1 => j
ODL_12:20:int_sort(int):j + 1 => 1
ODL_13:23:int_sort(int):j + 1 => j
ODL_14:23:int_sort(int):j + 1 => 1
ODL_15:26:int_sort(int):j + 1 => j
ODL_16:26:int_sort(int):j + 1 => 1
CDL_1:18:int_sort(int):i - 1 => i
CDL_2:18:int_sort(int):j >= 0 => j
CDL_3:20:int_sort(int):j + 1 => j
CDL_4:23:int_sort(int):j + 1 => j
CDL_5:26:int_sort(int):j + 1 => j
